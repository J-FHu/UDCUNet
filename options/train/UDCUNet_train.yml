# general settings
name: UDCUNet_4gpu
model_type: UDCModel
scale: 1
num_gpu: auto
manual_seed: 10

# dataset and data loader settings
datasets:
  train:
    name: udc_pair_train
    type: PairedImgPSFNpyDataset
    lq_map_type: same
    gt_map_type: same
    filename_tmpl: '{}'
    io_backend:
      type: npy
    folders:
      rot_1:
        dataroot_lq: ./datasets/training/input
        dataroot_gt: ./datasets/training/GT

    gt_size: 256
    use_flip: false
    use_rot: false

    # data loader
    use_shuffle: true
    num_worker_per_gpu: 6
    batch_size_per_gpu: 8
    dataset_enlarge_ratio: 1
    prefetch_mode: ~

  val:
    name: udc_val
    type: PairedImgPSFNpyDataset
    lq_map_type: same
    gt_map_type: same
    io_backend:
      type: npy
    folders:
      rot_5:
        dataroot_lq: ./datasets/validation/input
        dataroot_gt: ./datasets/validation/GT

#### network structures
network_g:
  type: UDCUNet
  nf: 32
  depths: [2,2,2,8,2,2,2]
  DyK_size: 3

# path
path:
  pretrain_network_g: ~
#  param_key_g: 'params_ema'
  strict_load_g: true
  resume_state: ~

# training settings
train:
  ema_decay: 0.999
  optim_g:
    type: Adam
    lr: !!float 2e-4
    weight_decay: 0
    betas: [0.9, 0.99]

  scheduler:
    type: CosineAnnealingRestartLR
    periods: [50000, 100000, 150000, 150000, 150000, 150000, 150000]
    restart_weights: [ 1, 1, 1, 1, 1, 1, 1]
    eta_min: !!float 1e-7

  total_iter: 600000
  warmup_iter: -1  # no warm up

  # losses
  pixel_opt:
    type: map_L1Loss


# validation settings
val:
  val_freq: !!float 5e3
  save_img: true

  metrics:
    psnr: # metric name, can be arbitrary
      type: calculate_psnr
      crop_border: 4
      test_y_channel: false

# logging settings
logger:
  print_freq: 100
  save_checkpoint_freq: !!float 5e3
  use_tb_logger: true
  wandb:
    project: ~
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500